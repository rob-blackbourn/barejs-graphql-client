{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap de8c53de81c7ed1cb3b3","webpack:///./src/graphql-event-source-client.js","webpack:///./src/graphql-event-source-subscriber.js","webpack:///./src/graphql-fetch-client.js","webpack:///./src/graphql-stream-client.js","webpack:///./src/graphql-ws-subscriber.js","webpack:///./src/graphql-ws-client.js","webpack:///./src/fetch-error.js","webpack:///./src/graphql-error.js","webpack:///./src/event-error.js"],"names":["abortController","fetch","method","signal","body","operationName","response","json","onNext","onComplete","error","location","eventSource","event","data","JSON","onError","subscriptionUrl","url","encodeURIComponent","onSuccess","write","close","abort","reason","start","controller","transform","line","flush","headers","accept","mode","lineDecoder","writeableStream","unsubscribe","subscriber","shutdown","index","wsUrl","constructor","Error","GQL","CONNECTION_INIT","CONNECTION_ACK","CONNECTION_ERROR","CONNECTION_KEEP_ALIVE","START","STOP","CONNECTION_TERMINATE","DATA","ERROR","COMPLETE","protocols","type","payload","callbacks","Array","callback","subscribe","id","onMessage"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"barejs-graphql-client\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"barejs-graphql-client\"] = factory();\n\telse\n\t\troot[\"barejs-graphql-client\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap de8c53de81c7ed1cb3b3","import FetchError from './fetch-error'\n\nexport default function graphqlClient (url, query, variables, operationName, onNext, onError, onComplete) {\n  const abortController = new AbortController()\n\n  // Invoke fetch as a POST with the GraphQL content in the body.\n  fetch(url, {\n    method: 'POST',\n    signal: abortController.signal,\n    body: JSON.stringify({\n      query,\n      variables,\n      operationName\n    })\n  })\n    .then(response => {\n      if (response.status === 200) {\n        // A 200 response is from a query or mutation.\n\n        response.json()\n          .then(json => {\n            onNext(json)\n            onComplete()\n          })\n          .catch(error => onError(error))\n      } else if (response.status === 201) {\n        // A 201 is the response for a subscription.\n\n        // The url for the event source is passed in the 'location' header.\n        const location = response.headers.get('location')\n\n        const eventSource = new EventSource(location)\n\n        eventSource.onmessage = event => {\n          const data = JSON.parse(event.data)\n          onNext(data)\n        }\n\n        eventSource.onerror = error => {\n          onError(error)\n        }\n\n        abortController.signal.onabort = () => {\n          if (eventSource.readyState !== 2) {\n            eventSource.close()\n            onComplete()\n          }\n        }\n      } else {\n        onError(new FetchError(response, 'Failed to execute GraphQL'))\n      }\n    })\n    .catch(error => onError(error))\n\n  // Return an unsubscribe function.\n  return () => {\n    abortController.abort()\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/graphql-event-source-client.js","export default function graphqlEventSourceSubscriber (url, query, variables, operationName, onNext, onError, onComplete) {\n  let subscriptionUrl = url + '?query=' + encodeURIComponent(query)\n  if (variables) {\n    subscriptionUrl += '&variables=' + encodeURIComponent(JSON.stringify(variables))\n  }\n  if (operationName) {\n    subscriptionUrl += '&operationName=' + encodeURIComponent(operationName)\n  }\n\n  const eventSource = new EventSource(subscriptionUrl)\n\n  eventSource.onmessage = event => {\n    const data = JSON.parse(event.data)\n    onNext(data)\n  }\n\n  eventSource.onerror = error => {\n    onError(error)\n  }\n\n  const abortController = new AbortController()\n  abortController.signal.onabort = () => {\n    if (eventSource.readyState !== 2) {\n      eventSource.close()\n      onComplete()\n    }\n  }\n\n  return abortController.abort\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/graphql-event-source-subscriber.js","import FetchError from './fetch-error'\n\nexport default function graphqlFetchClient (url, init, query, variables, operationName, onError, onSuccess) {\n  fetch(url, {\n    method: 'POST',\n    body: JSON.stringify({\n      query,\n      variables,\n      operationName\n    }),\n    ...init\n  })\n    .then(response => {\n      if (response.ok) {\n        response.json()\n          .then(json => {\n            onSuccess(json)\n          })\n          .catch(error => onError(error))\n      } else {\n        onError(new FetchError(response, 'Failed to execute GraphQL'))\n      }\n    })\n    .catch(error => onError(error))\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/graphql-fetch-client.js","function makeWriteableStream (onNext, onError, onComplete) {\n  return new WritableStream({\n    write (chunk, controller) {\n      onNext(chunk)\n    },\n    close (controller) {\n      onComplete()\n    },\n    abort (reason) {\n      if (reason.name === 'AbortError') {\n        onComplete()\n      } else {\n        onError(reason)\n      }\n    }\n  })\n}\n\nfunction makeLineDecoder () {\n  // eslint-disable-next-line no-undef\n  return new TransformStream({\n    start (controller) {\n      controller.buf = ''\n      controller.pos = 0\n    },\n    transform (chunk, controller) {\n      controller.buf += chunk\n      while (controller.pos < controller.buf.length) {\n        if (controller.buf[controller.pos] === '\\n') {\n          const line = controller.buf.substring(0, controller.pos)\n          if (line !== '') {\n            controller.enqueue(line)\n          }\n          controller.buf = controller.buf.substring(controller.pos + 1)\n          controller.pos = 0\n        } else {\n          ++controller.pos\n        }\n      }\n    },\n    flush (controller) {\n      if (controller.pos !== 0) {\n        controller.enqueue(controller.buf)\n      }\n    }\n  })\n}\n\nexport default function graphqlStreamClient (url, query, variables, operationName, onNext, onError, onComplete) {\n  const body = JSON.stringify({\n    query, variables, operationName\n  })\n  const method = 'POST'\n  const abortController = new AbortController()\n\n  fetch(url, {\n    method,\n    headers: new Headers({\n      allow: method,\n      'content-type': 'application/json',\n      accept: 'application/json'\n    }),\n    mode: 'cors',\n    body,\n    signal: abortController.signal\n  })\n    .then(response => {\n      if (response.status === 200) {\n        // A streaming response is a subscription.\n        const lineDecoder = makeLineDecoder()\n        const writeableStream = makeWriteableStream(onNext, onError, onComplete)\n\n        response.body\n        // eslint-disable-next-line no-undef\n          .pipeThrough(new TextDecoderStream())\n          .pipeThrough(lineDecoder)\n          // eslint-disable-next-line no-undef\n          .pipeThrough(new TransformStream({\n            transform (chunk, controller) {\n              controller.enqueue(JSON.parse(chunk))\n            }\n          }))\n          .pipeTo(writeableStream)\n          .catch(() => {\n            // Errors are handled in the writeable stream\n          })\n      } else {\n        onError(new Error('Unhandled response'))\n      }\n    })\n    .catch(error => {\n      onError(error)\n    })\n\n  // Return a method to stop the request.\n  return () => abortController.abort()\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/graphql-stream-client.js","import GraphQLError from './graphql-error'\nimport EventError from './event-error'\n\nconst GQL = {\n  CONNECTION_INIT: 'connection_init',\n  CONNECTION_ACK: 'connection_ack',\n  CONNECTION_ERROR: 'connection_error',\n  CONNECTION_KEEP_ALIVE: 'ka',\n  START: 'start',\n  STOP: 'stop',\n  CONNECTION_TERMINATE: 'connection_terminate',\n  DATA: 'data',\n  ERROR: 'error',\n  COMPLETE: 'complete'\n}\n\nclass Subscriber {\n  constructor (url, options, callback, protocols = 'graphql-ws') {\n    this.callback = callback\n\n    this.nextId = 1\n    this.subscriptions = new Map()\n    this.webSocket = new WebSocket(url, protocols)\n\n    this.webSocket.onopen = event => {\n      // Initiate the connection\n      this.webSocket.send(JSON.stringify({\n        type: GQL.CONNECTION_INIT,\n        payload: options\n      }))\n    }\n\n    this.webSocket.onclose = event => {\n      // The code 1000 (Normal Closure) is special, and results in no error or payload.\n      const error = event.code === 1000 || event.code === 1005 ? null : new EventError(event)\n      // Notify the subscriber.\n      this.callback(error)\n      // Notify the subscriptions.\n      const callbacks = Array.from(this.subscriptions.values())\n      this.subscriptions.clear()\n      for (const callback of callbacks) {\n        callback(error, null)\n      }\n    }\n\n    this.webSocket.onmessage = this.onMessage.bind(this)\n  }\n\n  subscribe (query, variables, operationName, callback) {\n    const id = (this.nextId++).toString()\n    this.subscriptions.set(id, callback)\n\n    this.webSocket.send(JSON.stringify({\n      type: GQL.START,\n      id,\n      payload: { query, variables, operationName }\n    }))\n\n    // Return the unsubscriber.\n    return () => {\n      this.subscriptions.delete(id)\n\n      this.webSocket.send(JSON.stringify({\n        type: GQL.STOP,\n        id\n      }))\n    }\n  }\n\n  shutdown () {\n    this.webSocket.send(JSON.stringify({\n      type: GQL.CONNECTION_TERMINATE\n    }))\n    this.webSocket.close()\n  }\n\n  onMessage (event) {\n    const data = JSON.parse(event.data)\n\n    switch (data.type) {\n      case GQL.CONNECTION_ACK: {\n        // This is the successful response to GQL.CONNECTION_INIT\n        if (this.callback) {\n          this.callback(null, this.subscribe.bind(this))\n        }\n        break\n      }\n      case GQL.CONNECTION_ERROR: {\n        // This may occur:\n        // 1. In response to GQL.CONNECTION_INIT\n        // 2. In case of parsing errors in the client which will not disconnect.\n        if (this.callback) {\n          this.callback(new GraphQLError(data.payload), this)\n        }\n        break\n      }\n      case GQL.CONNECTION_KEEP_ALIVE: {\n        // This may occur:\n        // 1. After GQL.CONNECTION_ACK,\n        // 2. Periodically to keep the connection alive.\n        break\n      }\n      case GQL.DATA: {\n        // This message is sent after GQL.START to transfer the result of the GraphQL subscription.\n        const callback = this.subscriptions.get(data.id)\n        if (callback) {\n          const error = data.payload.errors ? new GraphQLError(data.payload.errors) : null\n          callback(error, data.payload.data)\n        }\n        break\n      }\n      case GQL.ERROR: {\n        // This method is sent when a subscription fails. This is usually dues to validation errors\n        // as resolver errors are returned in GQL.DATA messages.\n        const callback = this.subscriptions.get(data.id)\n        if (callback) {\n          callback(new GraphQLError(data.payload), null)\n        }\n        break\n      }\n      case GQL.COMPLETE: {\n        // This is sent when the operation is done and no more dta will be sent.\n        const callback = this.subscriptions.get(data.id)\n        if (callback) {\n          this.subscriptions.delete(data.id)\n          // Return a null error and payload to indicate the subscription is closed.\n          callback(null, null)\n        }\n        break\n      }\n    }\n  }\n}\n\nexport default function graphqlWsSubscriber (url, query, variables, operationName, onNext, onError, onComplete) {\n  let unsubscribe = null\n\n  const subscriber = new Subscriber(\n    url,\n    {},\n    (error, subscribe) => {\n      if (!(error || subscribe)) {\n        // Normal closure.\n        onComplete()\n      } else if (error) {\n        onError(error)\n      } else {\n        unsubscribe = subscribe(\n          query,\n          variables,\n          operationName,\n          (errors, data) => {\n            if (!(errors || subscribe)) {\n              // Normal closure\n              onComplete()\n            } else {\n              onNext({ data, errors })\n            }\n          })\n      }\n    },\n    'graphql-ws')\n\n  const shutdown = subscriber.shutdown.bind(subscriber)\n\n  return () => {\n    if (unsubscribe !== null) {\n      unsubscribe()\n    }\n    shutdown()\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/graphql-ws-subscriber.js","import FetchError from './fetch-error'\n// import graphQLSubscriber from './graphql-ws-subscriber'\nimport graphqlWsSubscriber from './graphql-ws-subscriber'\n\nexport default function graphqlWsClient (url, query, variables, operationName, onNext, onError, onComplete) {\n  const abortController = new AbortController()\n\n  // Invoke fetch as a POST with the GraphQL content in the body.\n  fetch(url, {\n    method: 'POST',\n    signal: abortController.signal,\n    body: JSON.stringify({\n      query,\n      variables,\n      operationName\n    })\n  })\n    .then(response => {\n      if (response.status === 200) {\n        // A 200 response is from a query or mutation.\n\n        response.json()\n          .then(json => {\n            onNext(json)\n            onComplete()\n          })\n          .catch(error => onError(error))\n      } else if (response.status === 201) {\n        // A 201 is the response for a subscription.\n\n        // The url for the event source is passed in the 'location' header.\n        const location = response.headers.get('location')\n        const index = location.indexOf('?')\n        const wsUrl = 'ws' + location.slice(4, index === -1 ? undefined : index)\n\n        const unsubscribe = graphqlWsSubscriber(wsUrl, query, variables, operationName, onNext, onError, onComplete)\n\n        abortController.signal.onabort = () => {\n          unsubscribe()\n        }\n      } else {\n        onError(new FetchError(response, 'Failed to execute GraphQL'))\n      }\n    })\n    .catch(error => {\n      onError(error)\n    })\n\n  // Return an unsubscribe function.\n  return () => {\n    abortController.abort()\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/graphql-ws-client.js","export default class FetchError extends Error {\n  constructor (response, ...params) {\n    super(...params)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, FetchError)\n    }\n\n    this.name = 'FetchError'\n    this.response = response\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/fetch-error.js","export default class GraphQLError extends Error {\n  constructor (details, ...params) {\n    super(...params)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError)\n    }\n\n    this.details = details\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/graphql-error.js","export default class EventError extends Error {\n  constructor (event, ...params) {\n    super(...params)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, EventError)\n    }\n\n    this.event = event\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/event-error.js"],"sourceRoot":""}